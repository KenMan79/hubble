# This configuration was generated by
# `rubocop --auto-gen-config`
# on 2020-08-21 16:28:01 UTC using RuboCop version 0.89.1.
# The point is for the user to remove these configuration records
# one by one as the offenses are removed from the code base.
# Note that changes in the inspected code, or installation of new
# versions of RuboCop, may require this file to be generated again.

# Offense count: 2
Lint/AmbiguousBlockAssociation:
  Enabled: false

# Offense count: 1
# Checks if we're assigning in the conditional. e.g. `if a = foo['bar']`
# This is one we should fix via refactor
Lint/AssignmentInCondition:
  Enabled: false

# Offense count: 10
# checks for duplicated method names
Lint/DuplicateMethods:
  Enabled: false

# Offense count: 2
# Configuration parameters: EnforcedStyle.
# SupportedStyles: native, lf, crlf
Layout/EndOfLine:
  Exclude:
    - 'app/models/concerns/cosmoslike/governance/depositlike.rb'
    - 'app/models/concerns/cosmoslike/governance/votelike.rb'

# Offense count: 184
# Cop supports --auto-correct.
# Configuration parameters: AutoCorrect, AllowHeredoc, AllowURI, URISchemes, IgnoreCopDirectives, IgnoredPatterns.
# URISchemes: http, https
# I really can't figure out why this won't get autocorrected. We fixed some but not them all
Layout/LineLength:
  Max: 100

# Offense count: 1
# checks for literals in conditional statement
Lint/LiteralAsCondition:
  Enabled: false

# Offense count: 1
# Cop supports --auto-correct.
# auto-correct isn't safe here without further testing
# I believe this should use a .sort before the .each in this line:
# spec/rails_helper.rb:11:1: W: Lint/NonDeterministicRequireOrder: Sort files before requiring them.
# `Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }`
Lint/NonDeterministicRequireOrder:
  Exclude:
    - 'spec/rails_helper.rb'

# Offence count: 2
# no autocorrect available
Lint/ReturnInVoidContext:
  Enabled: false

# Offense count: 6
# suggests we dont nest a variable name with the same one on the outer layer of a method
# will require a refactor
Lint/ShadowingOuterLocalVariable:
  Enabled: false

Lint/SuppressedException:
  Enabled: true
  Exclude:
    - 'app/decorators/polkadot/home_chain_decorator.rb'
    - 'app/decorators/avalanche/home_chain_decorator.rb'


# Offense count: 1
# don't use URI.escape method
Lint/UriEscapeUnescape:
  Enabled: false

# Offense count: 6
# var assignments that aren't currently used. Will require a refactor
Lint/UselessAssignment:
  Enabled: false

# Offense count: 100
# we can look at this for future refactoring. How far of a Max value do we want?
Metrics/AbcSize:
  Enabled: false

# Offense count: 3
# checks for the amount of nesting of blocks and allows us to set a "Max"
Metrics/BlockNesting:
  Enabled: false

# Offense count: 3
# checks for an excess of args to a method and allows us to set a "Max"
Metrics/ParameterLists:
  Enabled: false

# Offense count: 3
# Cop supports --auto-correct.
# Configuration parameters: AllowUnusedKeywordArguments, IgnoreEmptyMethods, IgnoreNotImplementedMethods.
# These need to be manually checked imo. I wouldn't want to remove the args automatically.
# It could be used for an autofail imo in the CI
Lint/UnusedMethodArgument:
  Exclude:
    - 'app/decorators/oasis/average_snapshot_decorator.rb'
    - 'app/helpers/formatting_helper.rb'

# We can set a Max value here if this is something we want to look at further
Metrics/BlockLength:
  Enabled: false

# Offense count: 1
# Configuration parameters: CountComments, CountAsOne.
# This would need a refactor I Imagine
Metrics/ClassLength:
  Max: 288

# Offense count: 43
# We can set a max but we will need to look at this as it will cause a reason to refactor
Metrics/CyclomaticComplexity:
  Max: 6
  Enabled: false

# Offense count: 1
# Configuration parameters: CountComments, CountAsOne.
# This would need a refactor I Imagine
Metrics/ModuleLength:
  Max: 156

# Offense count: 29
# Suggests we don't name methods with `get` or `set`
Naming/AccessorMethodName:
  Enabled: false

# Offense count: 13
# suggests that if a method is named @active, anything that references it should not be `active_has`, e.g. @active_has
# there's a few different configuration options we can choose
Naming/MemoizedInstanceVariableName:
  Enabled: false

# Offense count: 9
# do we want to enforce the naming types? eg. ending in numbers, camelcase, shortnames ('a')
Naming/MethodParameterName:
  Enabled: false

# Offense count: 20
# suggests we don't use `is_` or `has_` in our method naming
Naming/PredicateName:
  Enabled: false

# Offence count: 2
Rails/Date:
  Enabled: false

# Offence count: 15
Rails/HasManyOrHasOneDependent:
  Enabled: false

# Offence count: 40
Rails/HelperInstanceVariable:
  Enabled: false

# Offence count: 84
Rails/Output:
  Enabled: false

# Offence count: 9
Rails/OutputSafety:
  Enabled: false

# Offence count: 8
Rails/SkipsModelValidations:
  Enabled: false

# Offence count: 20
Rails/TimeZone:
  Enabled: false

# Offense count: 3
# checks that instances aren't being stubbed globally
RSpec/AnyInstance:
  Enabled: false

# Offense count: 30
# We can look at this for future but it will need a refactor on our tests
RSpec/ContextWording:
  Prefixes:
    - when
    - with
    - without
    - if
    - unless
    - for
  Enabled: false

# Offense count: 28
# This would need a refactor I Imagine
RSpec/DescribeClass:
  Enabled: false

RSpec/DescribedClass:
  Enabled: false

# Offense count: 3
RSpec/EmptyExampleGroup:
  Enabled: false

# Offense count: 73
# We can look at these for refactoring for future
RSpec/ExampleLength:
  Enabled: false

# Offense count: 3
# do not use `expect` in before/after hooks
RSpec/ExpectInHook:
  Enabled: false

# Offense count: 12
# looks at our spec path naming
RSpec/FilePath:
  Enabled: false

# Offense count: 24
# checks tests for unreferrenced 'lets'
# requires a refactor for fixing this
RSpec/LetSetup:
  Enabled: false

# Offense count: 5
# checks that we use "spies" in our tests e.g. `has_received` instead of `received`
RSpec/MessageSpies:
  Enabled: false

# we can add a Max value here if we choose, it's basically how many "expects" to allow in each test
RSpec/MultipleExpectations:
  Enabled: false

# Offense count: 10
# Configuration parameters: AllowSubject.
RSpec/MultipleMemoizedHelpers:
  Max: 11

# Offense count: 92
# Needs to be investigated for refactoring of our tests
RSpec/NamedSubject:
  Enabled: false

# Offense count: 2
# move multiple "before" calls into a single one inside each test
RSpec/ScatteredSetup:
  Enabled: false

# Offense count: 11
# checks if doubles are instances/verified
RSpec/VerifiedDoubles:
  Enabled: false

# Offense count: 1
# don't use expect without .to or .to_be
RSpec/VoidExpect:
  Enabled: false

# Offense count: 6
# Cop supports --auto-correct.
# Configuration parameters: AutoCorrect.
# Potentially an unsafe autocorrect. Would need to be tested
Security/JSONLoad:
  Exclude:
    - 'app/services/common/indexer_client.rb'
    - 'app/services/cosmoslike/sync_base.rb'
    - 'app/services/oasis/client.rb'
    - 'spec/support/helpers/fixture_helpers.rb'

# Offense count: 1
# Cop supports --auto-correct.
# Potentially an unsafe autocorrect. Would need to be tested
Security/YAMLLoad:
  Exclude:
    - 'config/deploy.rb'

# Offense Count: 400+
# This will need testing to see if it breaks our builds
Style/ClassAndModuleChildren:
  Enabled: false

# Offense Count: 300+
# This is something we can look at in future but for now we'll remove this as it sets off warnings for 300+
Style/Documentation:
  Enabled: false

# Offense count: 13
# suggests we shouldn't a.to_f / b.to_f and should only have one or the other
Style/FloatDivision:
  Enabled: false

# Offense count: 1
# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle.
# SupportedStyles: format, sprintf, percent
# I'm not sure on what format we'd like to move forward in this one. May need a more experienced eye
Style/FormatString:
  Exclude:
    - 'app/helpers/formatting_helper.rb'

# Offense count: 8
# I don't think this is something we want to change, it suggests we use `$<foo>` over `$foo`
Style/FormatStringToken:
  Enabled: false

# Offense count: 35
Style/GuardClause:
  Enabled: false

# Offense count: 6
# checks if the same assignment happens in both sides of a branch
Style/IdenticalConditionalBranches:
  Enabled: false

# Offense count: 4
# check if we want to allow conditionals inside else blocks
Style/IfInsideElse:
  Enabled: false

# Offense count: 2
# checks the usage of how our Mixin's are called
Style/MixinUsage:
  Enabled: false

# Offense count: 3
# This cop checks for chaining of a block after another block that spans multiple lines
Style/MultilineBlockChain:
  Enabled: false

# Offense count: 26
# This will need us to check when we change as its not a safe autocorrect (e.g. changeds == 0 to .zero? etc)
Style/NumericPredicate:
  Enabled: false

# Offense count: 49
# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle.
# SupportedStyles: short, verbose
# Do we have a preference on "Use Hash#key? instead of Hash#has_key?" here?
Style/PreferredHashMethods:
  Enabled: false

# Offense count: 5
# "Do not use semicolons to terminate expressions"
Style/Semicolon:
  Enabled: false

# Offense Count: 46
# requires a refactor and confirm
# Prefer $ERROR_INFO from the stdlib 'English' module (don't forget to require it) over $!.message
Style/SpecialGlobalVars:
  Enabled: false

# Offense count: 7
# matter of preference, unsafe autocorrect. suggests `something.map(&:upcase)` instead of `something.map { |s| s.upcase }`
Style/SymbolProc:
  Enabled: false
